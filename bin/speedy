#!/usr/bin/env node
'use strict'

const argv = require('argv');
const fs = require('fs');
const net = require('net');
const spawn = require('child_process').spawn;
const path = require('path');
const ps = require('ps-node');

const SERVER_PID_FILE = path.join(__dirname, '..', 'server.pid');

argv.option({
  name: 'port',
  short: 'p',
  type: 'string',
  description: 'port to bind to',
});

argv.option({
  name: 'log-file',
  short: '-l',
  type: 'string',
  description: 'log file to use',
});

argv.option({
  name: 'start',
  type: 'boolean',
  description: 'start gulp server',
});

argv.option({
  name: 'stop',
  type: 'boolean',
  description: 'stop gulp server',
});

argv.option({
  name: 'restart',
  type: 'boolean',
  description: 'restart gulp server',
});

const args = argv.run(),
  port = parseInt(args.options.port || 3746),
  finRg = /^Finished '([^']+)'/;

function findGulpfile(dirname) {
  const gulpfile = path.join(dirname, 'gulpfile.js');
  if (fs.existsSync(gulpfile))
    return gulpfile;
  const parentPath = path.normalize(path.join(dirname, '..'));
  if (parentPath === dirname)
    throw Error('gulpfile not found');
  else 
    return findGulpfile(parentPath);
};

function connect(port, gulpfile) {
  const finished = new Map();
  for(let task of args.targets) {
    finished.set(task, false);
  }

  const client = net.connect({port: port}, () => {
    client.write(JSON.stringify([
      0,
      {
        type: 'start-tasks',
        args: args.targets,
        silent: false,
        gulpfile: gulpfile,
      }
    ]));
  });

  client.on('data', (msg) => {
    msg.toString().split('\n').forEach((msg) => {
      let parsed;
      try {
        parsed  = JSON.parse(msg); 
      } catch (err) {
        // console.log(msg);
        // console.log(err);
        return;
      }
      const data = parsed[1];
      console.log(data.dataColor || data.data);

      let match = finRg.exec(data.data);
      if (match && finished.has(match[1]))
        finished.set(match[1], true);
      for(let v of finished.values()) {
        if (!v) return;
      }
      client.end();
      process.exit(0);
    });
  });
  return client;
};

function stopServer() {
  if (fs.existsSync(SERVER_PID_FILE)) {
    const pid = fs.readFileSync(SERVER_PID_FILE)
      .toString();
    ps.kill(pid);
    fs.unlinkSync(SERVER_PID_FILE);
  }
};

function startServer(port) {
  const gsPath = path.normalize(path.join(__dirname, '../scripts/gulp-server.js')),
    options = ['--harmony', gsPath, '--port='+port],
    logFile = args.options['log-file'];
  if (logFile && typeof logFile === "string")
    options.push(`--log-file=${logFile}`);
  const pid = spawn('node', options, {detached: true}).pid;
  console.info(`starting gulp-server (pid ${pid}) on port ${port}`);

  if (fs.existsSync(SERVER_PID_FILE))
    fs.unlinkSync(SERVER_PID_FILE);
  fs.writeFileSync(SERVER_PID_FILE, pid)
};

if (args.options.start || args.options.stop || args.options.restart) {
  if (args.options.start && args.options.stop
      || args.options.start && args.options.restart
      || args.options.stop && args.options.restart) {
    console.info('only one of the switches is allowed:  --start, --stop, --restart')
    process.exit(1);
  }

  if (args.options.stop) {
    stopServer();
  } else if (args.options.start) {
    if (fs.existsSync(SERVER_PID_FILE))
      stopServer();
    startServer(port);
  } else if (args.options.restart) {
    stopServer();
    startServer(port);
  }
  process.exit(0);
} else {
  let gulpfile;
  try {
    gulpfile = findGulpfile(process.cwd());
  } catch (err) {
    console.error('gulpfile.js not found');
    process.exit(1);
  }

  let client = connect(port, gulpfile);
  client.on('error', (err) => {
    if (err.code === 'ECONNREFUSED') {
      startServer(port);
      setTimeout(connect, 1000, port, gulpfile);
    }
  });
}

// vim: ft=javascript
